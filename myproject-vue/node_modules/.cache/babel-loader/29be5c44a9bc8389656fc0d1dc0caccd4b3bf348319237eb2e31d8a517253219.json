{"ast":null,"code":"import { mapActions, mapGetters } from 'vuex';\nimport SpinnerComponent from '@/components/SpinnerComponent.vue';\nimport HeaderComponent from '@/components/HeaderComponent.vue';\nexport default {\n  name: 'PostList',\n  components: {\n    SpinnerComponent,\n    HeaderComponent\n  },\n  data() {\n    return {\n      headingValue: \"Post Listing Page\",\n      loading: false,\n      errorMessage: null,\n      successMessage: '',\n      message: '',\n      items: [],\n      next: null,\n      previous: null,\n      param: 1,\n      sort: 'asc',\n      sortField: null,\n      sortParam: null,\n      search: null\n    };\n  },\n  mounted() {\n    this.isLoading = true;\n    this.postListAction(this.param).then(response => {\n      if (response.status === 200) {\n        this.items = response.data.results.results;\n        this.next = response.data.results.next;\n        this.previous = response.data.results.previous;\n        this.isLoading = false;\n      }\n    });\n  },\n  methods: {\n    ...mapActions({\n      postListAction: 'postList',\n      postDeleteAction: 'postDelete'\n    }),\n    prevPage() {\n      console.log(this.previous.split(\"page=\")[1]);\n      this.param = this.previous.split(\"page=\")[1];\n      if (this.param === undefined) {\n        this.param = 1;\n      }\n      if (this.sortField) {\n        if (this.sort == 'asc') {\n          this.sortParam = `${this.param}&ordering=${this.sortField}`;\n        } else {\n          this.sortParam = `${this.param}&ordering=-${this.sortField}`;\n        }\n      } else {\n        this.sortParam = this.param;\n      }\n      this.isLoading = true;\n      this.postListAction(this.sortParam).then(response => {\n        if (response.status === 200) {\n          this.items = response.data.results.results;\n          this.next = response.data.results.next;\n          this.previous = response.data.results.previous;\n          this.isLoading = false;\n        }\n      });\n    },\n    nextPage() {\n      this.param = this.next.split(\"page=\")[1];\n      if (this.sortField) {\n        if (this.sort == 'asc') {\n          this.sortParam = `${this.param}&ordering=${this.sortField}`;\n        } else {\n          this.sortParam = `${this.param}&ordering=-${this.sortField}`;\n        }\n      } else {\n        this.sortParam = this.param;\n      }\n      this.isLoading = true;\n      this.postListAction(this.sortParam).then(response => {\n        if (response.status === 200) {\n          this.items = response.data.results.results;\n          this.next = response.data.results.next;\n          this.previous = response.data.results.previous;\n          this.isLoading = false;\n        }\n      });\n    },\n    sortFieldFunction(value) {\n      if (value === this.sortField) {\n        this.sort = this.sort == 'asc' ? 'desc' : 'asc';\n      } else {\n        this.sort = 'asc';\n      }\n      this.sortField = value;\n      if (this.sort == 'asc') {\n        this.sortParam = `${this.param}&ordering=${value}`;\n      } else {\n        this.sortParam = `${this.param}&ordering=-${value}`;\n      }\n      this.postListAction(this.sortParam).then(response => {\n        if (response.status === 200) {\n          this.items = response.data.results.results;\n          this.next = response.data.results.next;\n          this.previous = response.data.results.previous;\n          this.isLoading = false;\n        }\n      });\n    },\n    searchValue() {\n      this.isLoading = true;\n      this.param = 1;\n      this.sortParam = `${this.param}&search=${this.search}`;\n      this.postListAction(this.sortParam).then(response => {\n        if (response.status === 200) {\n          this.items = response.data.results.results;\n          this.next = response.data.results.next;\n          this.previous = response.data.results.previous;\n          this.isLoading = false;\n        }\n      });\n    },\n    postDelete(postId) {\n      try {\n        this.postDeleteAction(postId).then(response => {\n          if (response.data.status.code === 200) {\n            window.scrollTo(0, 0);\n            this.successMessage = response.data.status.message;\n            setTimeout(() => {\n              this.successMessage = '';\n            }, 1000);\n            setTimeout(() => this.$router.go(), 1000);\n          } else {\n            this.message = 'Some Error Occured. Can you please try again';\n            setTimeout(() => {\n              this.message = '';\n            }, 3000);\n          }\n        });\n      } catch (error) {\n        console.log(error.response.data.results);\n        this.errorMessage = error.response.data.results;\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      postList: 'getPostList',\n      successMessage: 'getPostSuccess',\n      errorMessage: 'getPostError'\n    })\n  }\n};","map":{"version":3,"mappings":"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","names":["mapActions","mapGetters","SpinnerComponent","HeaderComponent","name","components","data","headingValue","loading","errorMessage","successMessage","message","items","next","previous","param","sort","sortField","sortParam","search","mounted","isLoading","postListAction","then","response","status","results","methods","postDeleteAction","prevPage","console","log","split","undefined","nextPage","sortFieldFunction","value","searchValue","postDelete","postId","code","window","scrollTo","setTimeout","$router","go","error","computed","postList"],"sourceRoot":"","sources":["/home/shilpa/Public/my-work/code/demo-authentication/authenticate-vue/src/views/PostList.vue"],"sourcesContent":["<template>\n <HeaderComponent :heading=\"headingValue\" />\n\n <!--spinner -->\n <div v-if=\"loading === true\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <SpinnerComponent/>\n      </div>\n    </div>\n  </div>\n\n </div>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n            <p v-if=\"successMessage\" class=\"h4 text-success \">{{successMessage}}</p>\n            <p v-if=\"message\" class=\"h4 text-primary \">{{message}}</p>\n\n      </div>\n\n    </div>\n  </div>\n<div class=\"container mt-3\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">\n      <router-link to=\"/post/create\" class=\"btn btn-success btn-sm\"><i class=\"fa fa-plus-circle\"></i> Add New</router-link>      \n    </div>\n    <div class=\"col-md-10\">\n      <form @submit.prevent=\"searchValue\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <input v-model=\"search\" type=\"text\" class=\"form-control\" placeholder=\"Search Name\">\n          </div>\n          <div class=\"col\">\n            <input type=\"submit\" value=\"search\" class=\"btn btn-outline-dark\">\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n<div class=\"container mt-3\">\n  \n</div>\n<div class=\"container mt-3\">\n  <table class=\"table table-border fixed\">\n    <thead>\n      <tr>\n        <th @click=\"sortFieldFunction('id')\" class=\"border-2 pd-2\">\n          Id <i class=\"fas fa-sort\"></i>\n          \n        </th>\n        <th @click=\"sortFieldFunction('title')\" class=\"border-2 pd-2\">\n          Title <i class=\"fas fa-sort\"></i>\n        </th>\n        <th class=\"border-2 pd-2\">\n          Image\n        </th>\n        <th class=\"border-2 pd-2\">\n          tag\n        </th>\n        <th class=\"border-2 pd-2\">\n          Action\n        </th>\n        \n      </tr>\n    </thead>\n    <tbody>\n      <tr v-for=\"item in items\"\n          :key=\"item.id\">\n        <td class=\"border-2 pd-2\">\n          {{item.id}}\n        </td>\n        <td class=\"border-2 pd-2\">\n          {{item.title}}\n        </td>\n        <td class=\"border-2 pd-2\">\n          {{item.tag}}\n        </td>\n        <td class=\"border-2 pd-2\">\n          <img :src=item.image class=\"user-img\">\n\n        </td>\n        <td class=\"border-2 pd-2\">\n          <div class=\"col-sm-1 d-flex justify-content-center align-items-center\">\n              <router-link :to=\"`/post/details/${item.id}`\" class=\"btn btn-warning my-1\">\n                <i class=\"fa fa-eye\"></i>\n              </router-link>\n              <router-link :to=\"`/post/update/${item.id}`\" class=\"btn btn-primary my-1\">\n                <i class=\"fa fa-pen\"></i>\n             </router-link>\n              <button @click=\"postDelete(item.id)\" class=\"btn btn-danger my-1\" ><i class=\"fa fa-trash\"></i></button> \n            </div>           \n        </td>\n        \n      </tr>\n    </tbody>\n  </table>\n    <p class=\"float-end\">\n    <button class=\"button btn btn-sm btn-primary m-1\" v-if=\"previous\" @click=\"prevPage\">Previous</button> \n    <button class=\"button btn btn-sm btn-primary m-1\" v-if=\"next\" @click=\"nextPage\">Next</button>\n    </p>\n</div>\n\n\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport SpinnerComponent from  '@/components/SpinnerComponent.vue'\nimport HeaderComponent from  '@/components/HeaderComponent.vue'\n\nexport default {\n    name:'PostList',\n    components:{\n      SpinnerComponent,\n      HeaderComponent\n    },\n    data(){\n      return{\n        headingValue : \"Post Listing Page\",\n        loading:false,\n        errorMessage:null,\n        successMessage:'',\n        message:'',\n        items:[],\n        next:null,\n        previous:null,\n        param:1,\n        sort:'asc',\n        sortField:null,\n        sortParam:null,\n        search:null,\n      }\n    },\n    mounted(){\n      \n      this.isLoading = true;\n      this.postListAction(this.param).then((response) => {\n        if (response.status === 200) {\n          this.items = response.data.results.results;\n          this.next= response.data.results.next;\n          this.previous= response.data.results.previous;\n          this.isLoading = false;\n        }\n      });\n    },\n    methods:{\n      ...mapActions({\n        postListAction: 'postList',\n        postDeleteAction: 'postDelete',\n      }),\n        prevPage(){\n          console.log(this.previous.split(\"page=\")[1])\n          this.param=this.previous.split(\"page=\")[1]\n          if(this.param === undefined){\n            this.param =1\n          }\n          if(this.sortField){\n              if(this.sort == 'asc'){\n                this.sortParam = `${this.param}&ordering=${this.sortField}`\n              }else{\n                this.sortParam = `${this.param}&ordering=-${this.sortField}`\n              }\n          }else{\n            this.sortParam= this.param \n          }\n          this.isLoading = true;\n          this.postListAction(this.sortParam).then((response) => {\n            if (response.status === 200) {\n              this.items = response.data.results.results;\n              this.next= response.data.results.next;\n              this.previous= response.data.results.previous;\n              this.isLoading = false;\n            }\n          });\n        },\n        nextPage(){\n          this.param=this.next.split(\"page=\")[1]\n          if(this.sortField){\n              if(this.sort == 'asc'){\n                this.sortParam = `${this.param}&ordering=${this.sortField}`\n              }else{\n                this.sortParam = `${this.param}&ordering=-${this.sortField}`\n              }\n          }else{\n            this.sortParam =this.param\n          }\n          this.isLoading = true;\n          this.postListAction(this.sortParam).then((response) => {\n            if (response.status === 200) {\n              this.items = response.data.results.results;\n              this.next= response.data.results.next;\n              this.previous= response.data.results.previous;\n              this.isLoading = false;\n            }\n          });\n        },\n        sortFieldFunction(value){\n          if(value === this.sortField){\n            this.sort=(this.sort=='asc' ? 'desc' : 'asc')\n          }else{\n            this.sort ='asc'\n          }\n          this.sortField = value;\n          if(this.sort == 'asc'){\n              this.sortParam = `${this.param}&ordering=${value}`\n          }else{\n            this.sortParam = `${this.param}&ordering=-${value}`\n          }\n\n          this.postListAction(this.sortParam).then((response) => {\n            if (response.status === 200) {\n              this.items = response.data.results.results;\n              this.next= response.data.results.next;\n              this.previous= response.data.results.previous;\n              this.isLoading = false;\n            }\n          });\n        },\n        searchValue(){\n          this.isLoading = true;\n          this.param=1;\n          this.sortParam = `${this.param}&search=${this.search}`\n          this.postListAction(this.sortParam).then((response) => {\n            if (response.status === 200) {\n              this.items = response.data.results.results;\n              this.next= response.data.results.next;\n              this.previous= response.data.results.previous;\n              this.isLoading = false;\n            }\n          });\n        },\n        postDelete(postId){\n          try{\n            this.postDeleteAction(postId).then((response) => {\n              if (response.data.status.code === 200){\n                \n                window.scrollTo(0, 0);\n                this.successMessage =response.data.status.message\n                setTimeout(() => {\n                  this.successMessage = '';\n                }, 1000);\n                setTimeout( () => this.$router.go() , 1000);\n              }else{\n                this.message ='Some Error Occured. Can you please try again'\n                setTimeout(() => {\n                  this.message = '';\n                }, 3000);\n\n              }\n            });\n          }\n        catch(error){\n          console.log(error.response.data.results)\n          this.errorMessage=error.response.data.results\n        }\n        },\n        \n      },\n      computed: {\n        ...mapGetters({\n          postList: 'getPostList',\n          successMessage: 'getPostSuccess',\n          errorMessage: 'getPostError',\n        })\n      }\n    \n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
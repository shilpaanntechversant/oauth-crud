{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  name: 'RegistrationView',\n  data() {\n    return {\n      userName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      errorMessage: {},\n      successMessage: '',\n      message: ''\n    };\n  },\n  methods: {\n    ...mapActions({\n      userSignupAction: 'userSignup'\n    }),\n    registerUser() {\n      if (this.password != this.confirmPassword) {\n        this.errorMessage.confirm_password = ['Confirm Password is not same as Password'];\n      } else {\n        try {\n          const userData = {\n            username: this.userName,\n            email: this.email,\n            password: this.password,\n            confirm_password: this.confirmPassword\n          };\n          this.userSignupAction(userData).then(response => {\n            this.userName = '';\n            this.email = '';\n            this.password = '';\n            this.confirmPassword = '';\n            if (response.data.status.code === 200) {\n              window.scrollTo(0, 0);\n              this.successMessage = response.data.status.message;\n              setTimeout(() => {\n                this.successMessage = '';\n              }, 3000);\n              setTimeout(() => this.$router.push({\n                path: '/'\n              }), 5000);\n            } else {\n              this.message = 'Some Error Occured. Can you please try again';\n              setTimeout(() => {\n                this.message = '';\n              }, 4000);\n              setTimeout(() => this.$router.push({\n                path: '/register'\n              }), 5000);\n            }\n          });\n        } catch (error) {\n          console.log(error);\n          this.errorMessage = error.response.data.results;\n        }\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      signupErrors: 'getSignupErrors',\n      signupSuccess: 'getSignupSuccess'\n    })\n  }\n};","map":{"version":3,"mappings":";AA8DA,SAASA,UAAU,EAAEC,UAAS,QAAS,MAAM;AAE7C,eAAe;EACXC,IAAI,EAAC,kBAAkB;EACvBC,IAAI,GAAE;IACF,OAAM;MACFC,QAAQ,EAAC,EAAE;MACXC,KAAK,EAAC,EAAE;MACRC,QAAQ,EAAC,EAAE;MACXC,eAAe,EAAC,EAAE;MAClBC,YAAY,EAAC,CAAC,CAAC;MACfC,cAAc,EAAC,EAAE;MACjBC,OAAO,EAAC;IACZ;EACJ,CAAC;EACDC,OAAO,EAAC;IACN,GAAGX,UAAU,CAAC;MACZY,gBAAgB,EAAE;IACpB,CAAC,CAAC;IACFC,YAAY,GAAE;MACZ,IAAG,IAAI,CAACP,QAAO,IAAK,IAAI,CAACC,eAAe,EAAC;QACvC,IAAI,CAACC,YAAY,CAACM,gBAAe,GAAG,CAAC,0CAA0C;MACjF,CAAC,MAAI;QACH,IAAI;UACF,MAAMC,QAAO,GAAI;YACfC,QAAQ,EAAE,IAAI,CAACZ,QAAQ;YACvBC,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;YACvBQ,gBAAgB,EAAE,IAAI,CAACP;UACzB,CAAC;UACD,IAAI,CAACK,gBAAgB,CAACG,QAAQ,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;YACjD,IAAI,CAACd,QAAO,GAAI,EAAE;YAClB,IAAI,CAACC,KAAI,GAAI,EAAE;YACf,IAAI,CAACC,QAAO,GAAI,EAAE;YAClB,IAAI,CAACC,eAAc,GAAI,EAAE;YACzB,IAAIW,QAAQ,CAACf,IAAI,CAACgB,MAAM,CAACC,IAAG,KAAM,GAAG,EAAE;cACrCC,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;cACrB,IAAI,CAACb,cAAa,GAAIS,QAAQ,CAACf,IAAI,CAACgB,MAAM,CAACT,OAAO;cAClDa,UAAU,CAAC,MAAM;gBACf,IAAI,CAACd,cAAa,GAAI,EAAE;cAC1B,CAAC,EAAE,IAAI,CAAC;cACRc,UAAU,CAAE,MAAM,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;gBAAEC,IAAI,EAAE;cAAG,CAAC,CAAC,EAAE,IAAI,CAAC;YAE1D,OAAO;cACL,IAAI,CAAChB,OAAM,GAAG,8CAA6C;cAC3Da,UAAU,CAAC,MAAM;gBACX,IAAI,CAACb,OAAM,GAAI,EAAE;cACnB,CAAC,EAAE,IAAI,CAAC;cACZa,UAAU,CAAE,MAAM,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;gBAAEC,IAAI,EAAE;cAAW,CAAC,CAAC,EAAE,IAAI,CAAC;YAClE;UACF,CAAC,CAAC;QACJ,EAAE,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAACF,KAAK;UACjB,IAAI,CAACnB,YAAY,GAACmB,KAAK,CAACT,QAAQ,CAACf,IAAI,CAAC2B,OAAM;QAC9C;MAGF;IAGF;EACF,CAAC;EACDC,QAAQ,EAAE;IACV,GAAG9B,UAAU,CAAC;MACV+B,YAAY,EAAE,iBAAiB;MAC/BC,aAAa,EAAE;IACjB,CAAC;EACH;AACJ","names":["mapActions","mapGetters","name","data","userName","email","password","confirmPassword","errorMessage","successMessage","message","methods","userSignupAction","registerUser","confirm_password","userData","username","then","response","status","code","window","scrollTo","setTimeout","$router","push","path","error","console","log","results","computed","signupErrors","signupSuccess"],"sourceRoot":"","sources":["/home/shilpa/Public/my-work/code/demo-authentication/authenticate-vue/src/views/RegistrationView.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-3\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <p class=\"h3 text-success fw-bold\">\n          Registration\n        </p>\n        <p class=\"fst-italic\">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>\n\n      </div>\n    </div>\n  </div>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n            <p v-if=\"successMessage\" class=\"h4 text-success \">{{successMessage}}</p>\n            <p v-if=\"message\" class=\"h4 text-primary \">{{message}}</p>\n\n      </div>\n\n    </div>\n  </div>\n          \n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <form @submit.prevent=\"registerUser\">\n          <div class=\"mb-2\">\n            <input v-model=\"userName\" type=\"text\" class=\"form-control\" placeholder=\"UserName\">\n            <p v-if=\"errorMessage && errorMessage.username\" class=\"h6 text-danger \">{{errorMessage.username[0]}}</p>\n          </div>\n          <div class=\"mb-2\">\n            <input v-model=\"email\" type=\"email\" class=\"form-control\" placeholder=\"Email\">\n            <p v-if=\"errorMessage && errorMessage.email\" class=\"h6 text-danger \">{{errorMessage.email[0]}}</p>\n\n          </div>\n          <div class=\"mb-2\">\n            \n            <input v-model=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\">\n            <p v-if=\"errorMessage && errorMessage.password\" class=\"h6 text-danger \">{{errorMessage.password[0]}}</p>\n          \n          </div>\n          <div class=\"mb-2\">\n            <input v-model=\"confirmPassword\" type=\"password\" class=\"form-control\" placeholder=\"Confirm Password\">\n            <p v-if=\"errorMessage && errorMessage.confirm_password\" class=\"h6 text-danger \">{{errorMessage.confirm_password[0]}}</p>\n          \n          </div>\n          \n          <div class=\"mb-2\">\n            <input type=\"submit\" class=\"btn btn-success\" value=\"Register\">\n          </div>\n        </form>\n      </div>\n      <div class=\"col-md-4\">\n        <img class=\"user-img-big\" src=\"https://w7.pngwing.com/pngs/340/956/png-transparent-profile-user-icon-computer-icons-user-profile-head-ico-miscellaneous-black-desktop-wallpaper.png\" >\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n    name:'RegistrationView',\n    data(){\n        return{\n            userName:'',\n            email:'',\n            password:'',\n            confirmPassword:'',\n            errorMessage:{},\n            successMessage:'',\n            message:''\n        }\n    },\n    methods:{\n      ...mapActions({\n        userSignupAction: 'userSignup',\n      }),\n      registerUser(){\n        if(this.password != this.confirmPassword){\n          this.errorMessage.confirm_password =['Confirm Password is not same as Password']\n        }else{\n          try {\n            const userData = {\n              username: this.userName,\n              email: this.email,\n              password: this.password,\n              confirm_password: this.confirmPassword,\n            };\n            this.userSignupAction(userData).then((response) => {\n              this.userName = '';\n              this.email = '';\n              this.password = '';\n              this.confirmPassword = '';\n              if (response.data.status.code === 200) {\n                window.scrollTo(0, 0);\n                this.successMessage = response.data.status.message;\n                setTimeout(() => {\n                  this.successMessage = '';\n                }, 3000);\n                setTimeout( () => this.$router.push({ path: '/'}), 5000);\n\n              } else {\n                this.message ='Some Error Occured. Can you please try again'\n                setTimeout(() => {\n                      this.message = '';\n                    }, 4000);\n                setTimeout( () => this.$router.push({ path: '/register'}), 5000);                \n              }\n            });\n          } catch (error) {\n            console.log(error)\n            this.errorMessage=error.response.data.results\n          } \n          \n        \n        }\n        \n\n      }\n    },\n    computed: {\n    ...mapGetters({\n        signupErrors: 'getSignupErrors',\n        signupSuccess: 'getSignupSuccess',\n      }),\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
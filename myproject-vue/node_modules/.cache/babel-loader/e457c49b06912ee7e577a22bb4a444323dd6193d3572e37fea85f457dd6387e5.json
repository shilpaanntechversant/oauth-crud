{"ast":null,"code":"import TagService from '@/services/TagService';\nimport * as types from './mutation-types';\nconst tagService = new TagService();\nexport const tagList = ({\n  commit\n}, param) => new Promise((resolve, reject) => {\n  tagService.tagList(param).then(response => {\n    commit(types.SET_TAG_LIST, response);\n    resolve(response);\n  }).catch(error => {\n    reject(error);\n  });\n});\nexport const tagCreate = ({\n  commit\n}, postData) => new Promise((resolve, reject) => {\n  tagService.postCreate(postData).then(response => {\n    commit(types.SET_POST_SUCCESS, response);\n    resolve(response);\n  }).catch(error => {\n    commit(types.SET_POST_ERROR, error.response.data);\n    reject(error);\n  });\n});\nexport const tagDetails = ({\n  commit\n}, postId) => new Promise((resolve, reject) => {\n  postService.postDetails(postId).then(response => {\n    commit(types.SET_POST_DETAILS, response);\n    resolve(response);\n  }).catch(error => {\n    reject(error);\n  });\n});\nexport const tagUpdate = ({\n  commit\n}, postData) => new Promise((resolve, reject) => {\n  postService.postUpdate(postData).then(response => {\n    commit(types.SET_POST_SUCCESS, response);\n    resolve(response);\n  }).catch(error => {\n    commit(types.SET_POST_ERROR, error.response.data);\n    reject(error);\n  });\n});\nexport const tagDelete = ({\n  commit\n}, tagId) => new Promise((resolve, reject) => {\n  tagService.tagDelete(tagId).then(response => {\n    commit(types.SET_TAG_SUCCESS, response);\n    resolve(response);\n  }).catch(error => {\n    commit(types.SET_TAG_ERROR, error.response.data);\n    reject(error);\n  });\n});","map":{"version":3,"names":["TagService","types","tagService","tagList","commit","param","Promise","resolve","reject","then","response","SET_TAG_LIST","catch","error","tagCreate","postData","postCreate","SET_POST_SUCCESS","SET_POST_ERROR","data","tagDetails","postId","postService","postDetails","SET_POST_DETAILS","tagUpdate","postUpdate","tagDelete","tagId","SET_TAG_SUCCESS","SET_TAG_ERROR"],"sources":["/home/shilpa/Public/my-work/code/demo-authentication/authenticate-vue/src/store/Tag/actions.js"],"sourcesContent":["import TagService from '@/services/TagService';\nimport * as types from './mutation-types';\n\nconst tagService = new TagService();\n\nexport const tagList = ({ commit }, param) => new Promise((resolve, reject) => {\n    tagService\n    .tagList(param)\n    .then((response) => {\n      commit(types.SET_TAG_LIST, response);\n      resolve(response);\n    })\n    .catch((error) => {\n      reject(error);\n    });\n});\n\nexport const tagCreate = ({ commit },postData) => new Promise((resolve, reject) => {\n    tagService\n      .postCreate(postData)\n      .then((response) => {\n        commit(types.SET_POST_SUCCESS, response);\n        resolve(response);\n      })\n      .catch((error) => {\n        commit(types.SET_POST_ERROR, error.response.data);\n        reject(error);\n      });\n  });\n  \n  \n  \n  export const tagDetails = ({ commit },postId) => new Promise((resolve, reject) => {\n    postService\n      .postDetails(postId)\n      .then((response) => {\n        commit(types.SET_POST_DETAILS, response);\n        resolve(response);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n  export const tagUpdate = ({ commit },postData) => new Promise((resolve, reject) => {\n    postService\n      .postUpdate(postData)\n      .then((response) => {\n        commit(types.SET_POST_SUCCESS, response);\n        resolve(response);\n      })\n      .catch((error) => {\n        commit(types.SET_POST_ERROR, error.response.data);\n        reject(error);\n      });\n  });\n    \n\nexport const tagDelete = ({ commit },tagId) => new Promise((resolve, reject) => {\n    tagService\n      .tagDelete(tagId)\n      .then((response) => {\n        commit(types.SET_TAG_SUCCESS, response);\n        resolve(response);\n      })\n      .catch((error) => {\n        commit(types.SET_TAG_ERROR, error.response.data);\n        reject(error);\n      });\n  });"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,KAAK,MAAM,kBAAkB;AAEzC,MAAMC,UAAU,GAAG,IAAIF,UAAU,EAAE;AAEnC,OAAO,MAAMG,OAAO,GAAG,CAAC;EAAEC;AAAO,CAAC,EAAEC,KAAK,KAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC3EN,UAAU,CACTC,OAAO,CAACE,KAAK,CAAC,CACdI,IAAI,CAAEC,QAAQ,IAAK;IAClBN,MAAM,CAACH,KAAK,CAACU,YAAY,EAAED,QAAQ,CAAC;IACpCH,OAAO,CAACG,QAAQ,CAAC;EACnB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;IAChBL,MAAM,CAACK,KAAK,CAAC;EACf,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAG,CAAC;EAAEV;AAAO,CAAC,EAACW,QAAQ,KAAK,IAAIT,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/EN,UAAU,CACPc,UAAU,CAACD,QAAQ,CAAC,CACpBN,IAAI,CAAEC,QAAQ,IAAK;IAClBN,MAAM,CAACH,KAAK,CAACgB,gBAAgB,EAAEP,QAAQ,CAAC;IACxCH,OAAO,CAACG,QAAQ,CAAC;EACnB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;IAChBT,MAAM,CAACH,KAAK,CAACiB,cAAc,EAAEL,KAAK,CAACH,QAAQ,CAACS,IAAI,CAAC;IACjDX,MAAM,CAACK,KAAK,CAAC;EACf,CAAC,CAAC;AACN,CAAC,CAAC;AAIF,OAAO,MAAMO,UAAU,GAAG,CAAC;EAAEhB;AAAO,CAAC,EAACiB,MAAM,KAAK,IAAIf,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAChFc,WAAW,CACRC,WAAW,CAACF,MAAM,CAAC,CACnBZ,IAAI,CAAEC,QAAQ,IAAK;IAClBN,MAAM,CAACH,KAAK,CAACuB,gBAAgB,EAAEd,QAAQ,CAAC;IACxCH,OAAO,CAACG,QAAQ,CAAC;EACnB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;IAChBL,MAAM,CAACK,KAAK,CAAC;EACf,CAAC,CAAC;AACN,CAAC,CAAC;AACF,OAAO,MAAMY,SAAS,GAAG,CAAC;EAAErB;AAAO,CAAC,EAACW,QAAQ,KAAK,IAAIT,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EACjFc,WAAW,CACRI,UAAU,CAACX,QAAQ,CAAC,CACpBN,IAAI,CAAEC,QAAQ,IAAK;IAClBN,MAAM,CAACH,KAAK,CAACgB,gBAAgB,EAAEP,QAAQ,CAAC;IACxCH,OAAO,CAACG,QAAQ,CAAC;EACnB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;IAChBT,MAAM,CAACH,KAAK,CAACiB,cAAc,EAAEL,KAAK,CAACH,QAAQ,CAACS,IAAI,CAAC;IACjDX,MAAM,CAACK,KAAK,CAAC;EACf,CAAC,CAAC;AACN,CAAC,CAAC;AAGJ,OAAO,MAAMc,SAAS,GAAG,CAAC;EAAEvB;AAAO,CAAC,EAACwB,KAAK,KAAK,IAAItB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC5EN,UAAU,CACPyB,SAAS,CAACC,KAAK,CAAC,CAChBnB,IAAI,CAAEC,QAAQ,IAAK;IAClBN,MAAM,CAACH,KAAK,CAAC4B,eAAe,EAAEnB,QAAQ,CAAC;IACvCH,OAAO,CAACG,QAAQ,CAAC;EACnB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;IAChBT,MAAM,CAACH,KAAK,CAAC6B,aAAa,EAAEjB,KAAK,CAACH,QAAQ,CAACS,IAAI,CAAC;IAChDX,MAAM,CAACK,KAAK,CAAC;EACf,CAAC,CAAC;AACN,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
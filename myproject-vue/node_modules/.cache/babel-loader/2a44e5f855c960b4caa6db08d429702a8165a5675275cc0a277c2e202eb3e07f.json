{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { AuthenticationServices } from \"@/services/AuthenticationServices.js\";\nexport default {\n  name: 'RegistrationView',\n  data() {\n    return {\n      data: {\n        username: '',\n        email: '',\n        password: '',\n        confirm_password: ''\n      },\n      errorMessage: {}\n    };\n  },\n  methods: {\n    registerUser: async function () {\n      if (this.data.password != this.data.confirm_password) {\n        this.errorMessage.confirm_password = 'Confirm Password is not same as Password';\n      } else {\n        try {\n          let response = await AuthenticationServices.registerUser(this.data);\n          if (response) {\n            setTimeout(() => this.$router.push({\n              path: '/'\n            }), 5000);\n            //return this.$router.push('/')\n          } else {\n            setTimeout(() => this.$router.push({\n              path: '/register'\n            }), 5000);\n\n            //return this.$router.push('/register')\n          }\n        } catch (error) {\n          console.log(error);\n          this.errorMessage = error.response.data.results;\n          // return this.$router.push('/register')\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAqDA,SAAQA,sBAAsB,QAAO,sCAAsC;AAE3E,eAAe;EACXC,IAAI,EAAC,kBAAkB;EACvBC,IAAI,GAAE;IACF,OAAM;MACFA,IAAI,EAAC;QACDC,QAAQ,EAAC,EAAE;QACXC,KAAK,EAAC,EAAE;QACRC,QAAQ,EAAC,EAAE;QACXC,gBAAgB,EAAC;MACrB,CAAC;MACDC,YAAY,EAAC,CAAC;IAClB;EACJ,CAAC;EACDC,OAAO,EAAC;IACNC,YAAY,EAAE,kBAAgB;MAC5B,IAAG,IAAI,CAACP,IAAI,CAACG,QAAO,IAAK,IAAI,CAACH,IAAI,CAACI,gBAAgB,EAAC;QAClD,IAAI,CAACC,YAAY,CAACD,gBAAe,GAAG,0CAAyC;MAC/E,CAAC,MAAI;QACH,IAAG;UACH,IAAII,QAAO,GAAI,MAAMV,sBAAsB,CAACS,YAAY,CAAC,IAAI,CAACP,IAAI,CAAC;UACnE,IAAIQ,QAAQ,EAAC;YACXC,UAAU,CAAE,MAAM,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;cAAEC,IAAI,EAAE;YAAG,CAAC,CAAC,EAAE,IAAI,CAAC;YACxD;UACF,CAAC,MAAI;YACHH,UAAU,CAAE,MAAM,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;cAAEC,IAAI,EAAE;YAAW,CAAC,CAAC,EAAE,IAAI,CAAC;;YAEhE;UAEF;QACF,EACA,OAAMC,KAAK,EAAC;UACVC,OAAO,CAACC,GAAG,CAACF,KAAK;UACjB,IAAI,CAACR,YAAY,GAACQ,KAAK,CAACL,QAAQ,CAACR,IAAI,CAACgB,OAAM;UAC5C;QACF;MACA;IAGF;EACF;AACJ","names":["AuthenticationServices","name","data","username","email","password","confirm_password","errorMessage","methods","registerUser","response","setTimeout","$router","push","path","error","console","log","results"],"sourceRoot":"","sources":["/home/shilpa/Public/my-work/code/demo-authentication/authenticate-vue/src/views/RegistrationView.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-3\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <p class=\"h3 text-success fw-bold\">\n          Registration\n        </p>\n        <p class=\"fst-italic\">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>\n\n      </div>\n    </div>\n  </div>\n  \n          \n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <form @submit.prevent=\"registerUser\">\n          <div class=\"mb-2\">\n            <input v-model=\"data.username\" type=\"text\" class=\"form-control\" placeholder=\"UserName\">\n            <p v-if=\"errorMessage && errorMessage.username\" class=\"h6 text-danger \">{{errorMessage.username[0]}}</p>\n          </div>\n          <div class=\"mb-2\">\n            <input v-model=\"data.email\" type=\"email\" class=\"form-control\" placeholder=\"Email\">\n            <p v-if=\"errorMessage && errorMessage.email\" class=\"h6 text-danger \">{{errorMessage.email[0]}}</p>\n\n          </div>\n          <div class=\"mb-2\">\n            \n            <input v-model=\"data.password\" type=\"password\" class=\"form-control\" placeholder=\"Password\">\n            <p v-if=\"errorMessage && errorMessage.password\" class=\"h6 text-danger \">{{errorMessage.password}}</p>\n          \n          </div>\n          <div class=\"mb-2\">\n            <input v-model=\"data.confirm_password\" type=\"password\" class=\"form-control\" placeholder=\"Confirm Password\">\n            <p v-if=\"errorMessage && errorMessage.confirm_password\" class=\"h6 text-danger \">{{errorMessage.confirm_password}}</p>\n          \n          </div>\n          \n          <div class=\"mb-2\">\n            <input type=\"submit\" class=\"btn btn-success\" value=\"Register\">\n          </div>\n        </form>\n      </div>\n      <div class=\"col-md-4\">\n        <img class=\"user-img-big\" src=\"https://w7.pngwing.com/pngs/340/956/png-transparent-profile-user-icon-computer-icons-user-profile-head-ico-miscellaneous-black-desktop-wallpaper.png\" >\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {AuthenticationServices} from \"@/services/AuthenticationServices.js\";\n\nexport default {\n    name:'RegistrationView',\n    data(){\n        return{\n            data:{\n                username:'',\n                email:'',\n                password:'',\n                confirm_password:''\n            },\n            errorMessage:{}\n        }\n    },\n    methods:{\n      registerUser: async function(){\n        if(this.data.password != this.data.confirm_password){\n          this.errorMessage.confirm_password ='Confirm Password is not same as Password'\n        }else{\n          try{\n          let response = await AuthenticationServices.registerUser(this.data);\n          if (response){\n            setTimeout( () => this.$router.push({ path: '/'}), 5000);\n            //return this.$router.push('/')\n          }else{\n            setTimeout( () => this.$router.push({ path: '/register'}), 5000);\n\n            //return this.$router.push('/register')\n\n          }\n        }\n        catch(error){\n          console.log(error)\n          this.errorMessage=error.response.data.results\n          // return this.$router.push('/register')\n        }\n        }\n        \n\n      }\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Cropper from \"cropperjs\";\nimport { mapActions, mapGetters } from 'vuex';\nimport HeaderComponent from '@/components/HeaderComponent.vue';\nexport default {\n  name: 'PostCreate',\n  components: {\n    HeaderComponent\n  },\n  data() {\n    return {\n      cropper: {},\n      destination: {},\n      crop_image: {},\n      headingValue: \"Add New Post\",\n      title: '',\n      description: '',\n      image: '',\n      successMessage: '',\n      message: '',\n      tagList: [],\n      selectetagList: []\n    };\n  },\n  mounted() {\n    this.isLoading = true;\n    this.tagListAction().then(response => {\n      if (response.status === 200) {\n        this.tagList = response.data.results;\n        this.isLoading = false;\n      }\n    });\n    this.crop_image = this.$refs.image;\n    this.cropper = new Cropper(this.crop_image, {\n      zoomable: false,\n      scalable: false,\n      aspectRatio: 1,\n      crop: () => {\n        const canvas = this.cropper.getCroppedCanvas();\n        this.destination = canvas.toDataURL(\"image/png\");\n      }\n    });\n  },\n  methods: {\n    ...mapActions({\n      postCreateAction: 'postCreate',\n      tagListAction: 'tagFullList'\n    }),\n    postAdd() {\n      try {\n        const postData = {\n          title: this.title,\n          description: this.description,\n          image: this.image,\n          tag: this.selectetagList.map(function (tag) {\n            return tag.id;\n          })\n        };\n        this.postCreateAction(postData).then(response => {\n          this.errorMessage.results = [];\n          if (response.data.status.code === 200) {\n            window.scrollTo(0, 0);\n            this.successMessage = response.data.status.message;\n            setTimeout(() => {\n              this.successMessage = '';\n            }, 3000);\n            setTimeout(() => this.$router.push({\n              path: '/post/list'\n            }), 3000);\n            //return this.$router.push('/')\n          } else {\n            this.message = 'Some Error Occured. Can you please try again';\n            setTimeout(() => {\n              this.message = '';\n            }, 3000);\n\n            //return this.$router.push('/register')\n          }\n        });\n      } catch (error) {\n        console.log(error.response.data.results);\n        this.errorMessage = error.response.data.results;\n        // return this.$router.push('/register')\n      }\n    },\n\n    startDrag(evt, item) {\n      evt.dataTransfer.dropEffect = 'move';\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('itemID', item.id);\n    },\n    onDrop(evt, list) {\n      const itemID = evt.dataTransfer.getData('itemID');\n      if (list == 'tagList') {\n        const tag = this.selectetagList.find(item => item.id == itemID);\n        let index = this.selectetagList.findIndex(item => item.id == itemID);\n        this.selectetagList.splice(index, 1);\n        this.tagList.push(tag);\n      } else {\n        const tag = this.tagList.find(item => item.id == itemID);\n        let index = this.tagList.findIndex(item => item.id == itemID);\n        this.tagList.splice(index, 1);\n        this.selectetagList.push(tag);\n      }\n    },\n    handleImage(e) {\n      const selectedImage = e.target.files[0];\n      // this.createBase64Image(selectedImage);\n      const render = new FileReader();\n      render.onload = e => {\n        this.image = e.target.result;\n      };\n      render.readAsDataURL(selectedImage);\n    }\n  },\n  computed: {\n    ...mapGetters({\n      successMessage: 'getPostSuccess',\n      errorMessage: 'getPostError',\n      tagList: 'getTagList'\n    })\n  }\n};","map":{"version":3,"mappings":"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","names":["Cropper","mapActions","mapGetters","HeaderComponent","name","components","data","cropper","destination","crop_image","headingValue","title","description","image","successMessage","message","tagList","selectetagList","mounted","isLoading","tagListAction","then","response","status","results","$refs","zoomable","scalable","aspectRatio","crop","canvas","getCroppedCanvas","toDataURL","methods","postCreateAction","postAdd","postData","tag","map","id","errorMessage","code","window","scrollTo","setTimeout","$router","push","path","error","console","log","startDrag","evt","item","dataTransfer","dropEffect","effectAllowed","setData","onDrop","list","itemID","getData","find","index","findIndex","splice","handleImage","e","selectedImage","target","files","render","FileReader","onload","result","readAsDataURL","computed"],"sourceRoot":"","sources":["/home/shilpa/Public/my-work/code/demo-authentication/authenticate-vue/src/views/PostCreate.vue"],"sourcesContent":["<template>\n <HeaderComponent :heading=\"headingValue\" />\n\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n            <p v-if=\"successMessage\" class=\"h4 text-success \">{{successMessage}}</p>\n            <p v-if=\"message\" class=\"h4 text-primary \">{{message}}</p>\n\n      </div>\n\n    </div>\n  </div>\n  <div class=\"container\">\n    <form @submit.prevent=\"postAdd\">\n\n      <div class=\"row\">\n\n        <div class=\"col-md-4\">\n            <div class=\"mb-2\">\n              <input v-model=\"title\" type=\"text\" class=\"form-control\" placeholder=\"Title\">\n              <p v-if=\"errorMessage.results && errorMessage.results.title\" class=\"h6 text-danger \">{{errorMessage.results.title[0]}}</p>\n            </div>\n            <div class=\"mb-2\">\n              \n              <textarea v-model=\"description\" class=\"form-control\" placeholder=\"Description\"></textarea>\n              <p v-if=\"errorMessage.results && errorMessage.results.description\" class=\"h6 text-danger \">{{errorMessage.results.description[0]}}</p>\n            </div>\n            <div class=\"mb-2\">\n              <input type=\"file\" accept=\"image/*\" class=\"form-control\" @change=\"handleImage\">\n              <p v-if=\"errorMessage.results && errorMessage.results.image\" class=\"h6 text-danger \">{{errorMessage.results.image[0]}}</p>\n            </div>\n            <div class=\"mb-2\">\n              <div class=\"img-container\">\n                  <img ref=\"image\" :src=\"src\" crossorigin>\n              </div>\n              <img :src=\"destination\" class=\"img-preview\">\n            </div>\n        </div>\n        <div class=\"col-md-4\" v-if=\"image\">\n          <img class=\"user-img-big\" :src=\"image\" >\n\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"drop-zone\" \n            @drop=\"onDrop($event, 'tagList')\"\n            @dragover.prevent\n            @dragenter.prevent\n          >\n            <div\n              class=\"drag-el\"\n              v-for=\"item in tagList\"\n              :key=\"item.title\"\n              draggable=\"true\"\n              @dragstart=\"startDrag($event, item)\"\n            >\n              {{ item.title }}\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"drop-zone\" \n            @drop=\"onDrop($event, 'selectetagList')\"\n            @dragover.prevent\n            @dragenter.prevent\n          >\n            <div\n              class=\"drag-el\"\n              v-for=\"item in selectetagList\"\n              :key=\"item.title\"\n              draggable=\"true\"\n              @dragstart=\"startDrag($event, item)\"\n            >\n              {{ item.title }}\n            </div>\n\n          </div>\n        </div>\n        <div class=\"mb-2\">\n          <input type=\"submit\" class=\"btn btn-success\" value=\"Create\">\n        </div>\n      </div>\n    </form>\n    \n  </div>\n</template>\n\n<script>\nimport Cropper from \"cropperjs\";\nimport { mapActions, mapGetters } from 'vuex';\nimport HeaderComponent from  '@/components/HeaderComponent.vue'\n\nexport default {\n    name:'PostCreate',\n    components:{\n      HeaderComponent\n    },\n    data(){\n        return{\n            cropper: {},\n            destination: {},\n            crop_image:{},\n            headingValue : \"Add New Post\",\n            title:'',\n            description:'',\n            image:'',\n            successMessage:'',\n            message:'',\n            tagList:[],\n            selectetagList:[],   \n        }\n    },\n    mounted(){\n      this.isLoading = true;\n      this.tagListAction().then((response) => {\n        if (response.status === 200) {\n          this.tagList = response.data.results;\n          this.isLoading = false;\n        }\n      });\n      this.crop_image = this.$refs.image;\n      this.cropper = new Cropper(this.crop_image, {\n          zoomable: false,\n          scalable: false,\n          aspectRatio: 1,\n          crop: () => {\n              const canvas = this.cropper.getCroppedCanvas();\n              this.destination = canvas.toDataURL(\"image/png\");\n          }\n      });\n\n    },\n    methods:{\n      ...mapActions({\n        postCreateAction: 'postCreate',\n        tagListAction: 'tagFullList',\n\n      }),\n      postAdd(){\n          try{\n            const postData = {\n              title: this.title,\n              description: this.description,\n              image: this.image,\n              tag: this.selectetagList.map(function (tag) { return tag.id; })\n            };\n\n\n            this.postCreateAction(postData).then((response) => {\n              this.errorMessage.results=[]\n\n              if (response.data.status.code === 200){\n                window.scrollTo(0, 0);\n                this.successMessage =response.data.status.message\n                setTimeout(() => {\n                  this.successMessage = '';\n                }, 3000);\n                setTimeout( () => this.$router.push({ path: '/post/list'}), 3000);\n                //return this.$router.push('/')\n              }else{\n                this.message ='Some Error Occured. Can you please try again'\n                setTimeout(() => {\n                  this.message = '';\n                }, 3000);\n\n                //return this.$router.push('/register')\n\n              }\n            });\n        }\n        catch(error){\n          console.log(error.response.data.results)\n          this.errorMessage=error.response.data.results\n          // return this.$router.push('/register')\n        }\n        \n        \n\n      },\n      startDrag(evt, item) {\n        evt.dataTransfer.dropEffect = 'move'\n        evt.dataTransfer.effectAllowed = 'move'\n        evt.dataTransfer.setData('itemID', item.id)\n      },\n      onDrop(evt, list) {\n        const itemID = evt.dataTransfer.getData('itemID')\n        if(list == 'tagList'){\n          const tag =  this.selectetagList.find((item) => item.id == itemID)\n          let index = this.selectetagList.findIndex(item => item.id  == itemID)\n          this.selectetagList.splice(index, 1)\n          this.tagList.push(tag)\n        }else{\n         const tag =  this.tagList.find((item) => item.id == itemID)\n         let index = this.tagList.findIndex(item => item.id  == itemID)\n         this.tagList.splice(index, 1)\n         this.selectetagList.push(tag)\n\n\n        }\n        \n      },\n      handleImage(e){\n        const selectedImage = e.target.files[0];\n        // this.createBase64Image(selectedImage);\n        const render = new FileReader();\n        render.onload = (e) =>{\n          this.image = e.target.result;\n        }\n        render.readAsDataURL(selectedImage)\n      },\n    },\n    computed: {\n    ...mapGetters({\n        successMessage: 'getPostSuccess',\n        errorMessage: 'getPostError',\n        tagList: 'getTagList',\n\n      }),\n    }\n}\n</script> \n\n<style>\n  .drop-zone {\n    background-color: darkseagreen;\n    margin-bottom: 10px;\n    padding: 10px;\n  }\n  .drag-el {\n    background-color: #fff;\n    margin-bottom: 10px;\n    padding: 5px;\n  }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}